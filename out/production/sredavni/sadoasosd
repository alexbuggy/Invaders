public void actionPerformed(ActionEvent e) {

        long currentTime = System.currentTimeMillis();



        if (activeKeys.contains(KeyEvent.VK_LEFT) || activeKeys.contains(KeyEvent.VK_A)) {
            player.moveLeft();
        }
        if (activeKeys.contains(KeyEvent.VK_RIGHT) || activeKeys.contains(KeyEvent.VK_D)) {
            player.moveRight();
        }
        if (activeKeys.contains(KeyEvent.VK_SPACE) && currentTime - lastBulletTime >= Bullet_SPAWN_DELAY) {
            bullets.add(new BulletTest(player.x + player.image.getWidth(null) / 2 - 16, 1000 - player.image.getHeight(null) + 30, "bullet.png"));
            activeKeys.remove(KeyEvent.VK_SPACE);
            lastBulletTime = currentTime;
        }





        for (AsteroidTest asteroid : asteroids) {
            asteroid.move();
        }

        for (BulletTest bullet : bullets) {  // Move each bullet
            bullet.move();
        }
        for (EnemyTest enemy : enemies) {  // Move each bullet
            enemy.Move();
        }
        for (EnemyBulletTest lasers : enemyammo) {
            lasers.move();
        }





        for (BulletTest bullet : bullets) {
            for (AsteroidTest asteroid : asteroids) {
                if (CheckCollision(bullet.x, (int)bullet.y, bullet.getWidth(), bullet.getHeight(), asteroid.x, (int)asteroid.y, asteroid.image.getWidth(null), asteroid.image.getHeight(null))) {
                    bulletsToRemove.add(bullet);
                    asteroidsToRemove.add(asteroid);
                    player.score_Up(100*(int)asteroid.speed);
                }
            }
        }

        for (BulletTest bullet : bullets) {
            if((int)bullet.y==(-20)){
                bulletsToRemove.add(bullet);
                System.out.println("s-a dus dracu glontu");
            }
        }

        for(AsteroidTest asteroid : asteroids)
            if(CheckCollision( asteroid.x, (int)asteroid.y, asteroid.image.getWidth(null), asteroid.image.getHeight(null),player.x, (int)player.y, player.image.getWidth(null), player.image.getHeight(null))){
                asteroidsToRemove.add(asteroid);
                player.takeDamage();
                System.out.println("You got hit! Player HP is "+player.getHp());
            }

        for(EnemyBulletTest lasers : enemyammo)
            if(CheckCollision( lasers.x, (int)lasers.y, lasers.image.getWidth(null), lasers.image.getHeight(null),player.x, (int)player.y+15, player.image.getWidth(null), player.image.getHeight(null))){
                lasersToRemove.add(lasers);
                player.takeDamage();
                System.out.println("You got hit! Player HP is "+player.getHp());
            }




        for(EnemyTest enemy:enemies) {
            for (BulletTest bullet : bullets) {
                if (CheckCollision(bullet.x, (int) bullet.y, bullet.getWidth(), bullet.getHeight(), enemy.x, (int) enemy.y, enemy.image.getWidth(null), enemy.image.getHeight(null))) {
                    bulletsToRemove.add(bullet);
                    enemy.takeDamage();
                }
            }
        }

        for(EnemyTest enemy:enemies) {
            if (enemy != null && enemy.y + enemy.image.getHeight(null) >= 1000 - player.image.getHeight(null) + 40) {
                System.out.println("Enemy has reached the player's level.");
                player.setHp(0);
            }
        }

        for(EnemyTest enemy:enemies) {
            if(enemy.getHp()==0){
                player.score_Up(enemy.Value);
                System.out.println("Enemy defeated, updating lastEnemyDeathTime");
                lastEnemyDeathTime = currentTime;
                enemiesToRemove.add(enemy);
            }
        }


        for(EnemyBulletTest lasers : enemyammo)
            if(lasers.y>=PANEL_HEIGHT){
                lasersToRemove.add(lasers);
            }

        for(AsteroidTest asteroid : asteroids)
            if(asteroid.y>=PANEL_HEIGHT)
            {
                asteroidsToRemove.add(asteroid);
                if(player.getScore()>=100*(int)asteroid.speed)
                    player.score_Down(100*(int)asteroid.speed);
                else
                    player.score_Down((int)player.getScore());
            }

        bullets.removeAll(bulletsToRemove);
        asteroids.removeAll(asteroidsToRemove);
        enemies.removeAll(enemiesToRemove);
        enemyammo.removeAll(lasersToRemove);



        if(currentTime - lastmodifyTime >= AsteroidSpeedRate){
            minSpeed+=incrementValue;
            maxSpeed+=incrementValue;
            asteroidspawnrate-=5;
            lastmodifyTime = currentTime;
        }


        if (random.nextInt(asteroidspawnrate) == 0) {  // Adjust spawn rate

            int randomX = MinXforAsteroids+random.nextInt(MaxXforAsteroids-MinXforAsteroids);
            float speedRand=minSpeed+random.nextFloat(maxSpeed-minSpeed);

            while(lastRandom==randomX || (randomX+50>lastRandom && randomX<lastRandom) || (randomX<lastRandom+50 && randomX>lastRandom+50)){
                 randomX = MinXforAsteroids+random.nextInt(MaxXforAsteroids-MinXforAsteroids);
            }
            asteroids.add(new AsteroidTest(randomX, 0,speedRand, "ast2.png"));
            lastRandom=randomX;
        }



        if (!enemySpawned && ((initialSpawn && currentTime - startTime >= INITIAL_SPAWN_DELAY) ||
                (!initialSpawn && currentTime - lastEnemyDeathTime >= ENEMY_SPAWN_COOLDOWN))) {

            enemies.add(new EnemyTest("enemy starship.png"));
            enemySpawned = true;
            lastEnemyDeathTime = currentTime;
            initialSpawn = false;
        }



        for(EnemyTest enemy:enemies) {
            if(enemy.x+20<=player.x && enemy.x+enemy.image.getWidth(null)-20>=player.x && currentTime - lastLaserTime >= Laser_SPAWN_DELAY){
                enemyammo.add(new EnemyBulletTest(player.x+player.image.getWidth(null)/2,enemy.y+enemy.image.getHeight(null),"laser.png"));

                lastLaserTime=currentTime;
            }
        }




        if(player.getHp()==0){
            mort=true;
            System.out.println("Player HP is 0. Game over.");
            timer.stop();
        }



        if(enemies.isEmpty()){
            enemySpawned=false;

        }

        repaint();

    }

